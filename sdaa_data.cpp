#include "sdaa_data.hpp"
#include <ddc.h>
namespace sdaa
{
    SdaaReceiver::SdaaReceiver(const std::string &listen_ip, unsigned short port, size_t ddc_batch_num, size_t ndec, std::vector<float> fir_coeffs)
        : socket_(io_context_,
                  boost::asio::ip::udp::endpoint(
                      boost::asio::ip::address::from_string(listen_ip), port))
    {
        int K = fir_coeffs.size() / ndec;
        std::cout << "K=" << K << std::endl;
        init_ddc_resources(&res_, N_PT_PER_FRAME, ddc_batch_num, ndec, K, fir_coeffs.data());

        init_free_payload_queue();
        init_free_ddc_queue();
        try
        {
            socket_.set_option(
                boost::asio::socket_base::receive_buffer_size(1024 * 1024 * 1024));
        }
        catch (const std::exception &e)
        {
            std::cerr << "Socket option error: " << e.what() << std::endl;
        }
    }

    SdaaReceiver::~SdaaReceiver()
    {
        std::cerr<<"BBB"<<std::endl;
        running_ = false;
        if (ddc_thread_handler.joinable()){
            ddc_thread_handler.join();
        }
        if(recv_thread_handler.joinable()){
            recv_thread_handler.join();
        }
        free_ddc_resources(&res_);
    }

    void SdaaReceiver::set_lo_ch(int32_t lo_ch)
    {
        lo_ch_ = lo_ch;
    }

    int32_t SdaaReceiver::get_lo_ch() const
    {
        return lo_ch_.load();
    }

    void SdaaReceiver::init_free_payload_queue()
    {
        for (size_t i = 0; i < QUEUE_CAPACITY; ++i)
        {
            free_payload_queue_.push(payload_pool_.construct());
        }
    }

    void SdaaReceiver::init_free_ddc_queue()
    {
        size_t n_out = calc_output_size();
        for (size_t i = 0; i < 32; ++i)
        {
            free_ddc_queue_.push(ddc_pool_.construct(n_out));
        }
    }

    void SdaaReceiver::receiver_thread()
    {
        constexpr uint64_t MAX_GAP = 1000000;
        uint64_t expected_pkt_cnt = 0;
        int64_t current_base_id = 0;
        uint64_t current_port_id = 0;
        bool initial = true;

        boost::asio::ip::udp::endpoint sender_endpoint;

        while (running_)
        {
            sdaa::Payload *p = nullptr;
            if (!free_payload_queue_.pop(p))
            {
                // std::cout<<"full.."<<std::endl;
                std::this_thread::sleep_for(std::chrono::microseconds(10));
                continue;
            }

            boost::system::error_code ec;
            size_t length = socket_.receive_from(
                boost::asio::buffer(p, sizeof(sdaa::Payload)),
                sender_endpoint, 0, ec);

            if (ec || length != sizeof(sdaa::Payload))
            {
                free_payload_queue_.push(p);
                continue;
            }

            if (p->head != 0x12345678 || p->version != 0xa1a1a1a1)
            {
                free_payload_queue_.push(p);
                continue;
            }

            if (p->pkt_cnt == 0)
            {
                std::cout << "initialized" << std::endl;
                initial = true;
            }

            if (initial)
            {
                expected_pkt_cnt = p->pkt_cnt + 1;
                current_base_id = p->base_id;
                current_port_id = p->port_id;
                initial = false;
                payload_queue_.push(p);
            }
            else
            {
                if (p->pkt_cnt == expected_pkt_cnt)
                {
                    current_base_id = p->base_id;
                    current_port_id = p->port_id;
                    payload_queue_.push(p);
                    expected_pkt_cnt++;
                }
                else if (p->pkt_cnt > expected_pkt_cnt)
                {
                    std::cout << "u";
                    uint64_t missing = p->pkt_cnt - expected_pkt_cnt;
                    for (uint64_t i = 0; i < missing; ++i)
                    {
                        sdaa::Payload *fake = nullptr;
                        if (!free_payload_queue_.pop(fake))
                            break;

                        fake->pkt_cnt = expected_pkt_cnt + i;
                        fake->base_id = current_base_id;
                        fake->port_id = current_port_id;
                        memset(fake->data, 0, sizeof(fake->data));

                        payload_queue_.push(fake);
                    }
                    current_base_id = p->base_id;
                    current_port_id = p->port_id;
                    payload_queue_.push(p);
                    expected_pkt_cnt = p->pkt_cnt + 1;
                }
                else
                {
                    if ((expected_pkt_cnt - p->pkt_cnt) > MAX_GAP)
                    {
                        expected_pkt_cnt = p->pkt_cnt + 1;
                        current_base_id = p->base_id;
                        current_port_id = p->port_id;
                        payload_queue_.push(p);
                    }
                    else
                    {
                        free_payload_queue_.push(p);
                    }
                }
            }
        }
        std::cout<<"stopped"<<std::endl;
    }

    void SdaaReceiver::ddc_thread()
    {
        while (is_running())
        {
            sdaa::Payload *p = nullptr;
            if (pop_payload(p))
            {
                if (ddc(p->data, lo_ch_.load(), &res_))
                {
                    std::vector<std::complex<float>> *p1 = nullptr;
                    while (is_running() && !free_ddc_queue_.pop(p1))
                    {
                        if (!is_running()){
                            return;
                        }
                        std::cerr<<"$$$$$$$$$$$$$$$$$$$$$$$$$$$"<<std::endl;
                        std::this_thread::yield();
                    }
                    fetch_output((fcomplex*)(p1->data()), &res_);
                    ddc_queue_.push(p1);
                }
                push_free_payload(p);
            }
            else
            {
                std::this_thread::yield();
            }
        }
    }

    bool SdaaReceiver::pop_payload(sdaa::Payload *&p)
    {
        return payload_queue_.pop(p);
    }

    void SdaaReceiver::push_free_payload(sdaa::Payload *p)
    {
        free_payload_queue_.push(p);
    }

    bool SdaaReceiver::pop_ddc(std::vector<std::complex<float>> *&p)
    {
        return ddc_queue_.pop(p);
    }

    void SdaaReceiver::push_free_ddc(std::vector<std::complex<float>> *&p)
    {
        free_ddc_queue_.push(p);
    }

    bool SdaaReceiver::is_running() const
    {
        return running_.load();
    }

    void SdaaReceiver::start()
    {
        running_ = true;
        recv_thread_handler=std::thread([this]
                             { this->receiver_thread(); });

        ddc_thread_handler=std::thread([this]
                          { this->ddc_thread(); });
        //receiver.detach();
        //..ddc_t.detach();
    }

    void SdaaReceiver::stop()
    {
        running_ = false;
        std::cout<<"stopped"<<std::endl;
    }

    size_t SdaaReceiver::calc_output_size() const
    {
        return ::calc_output_size(&res_);
    }

    std::vector<float> fir_coeffs_half()
    {
        return std::vector<float>{-0.00011975709287684854,-5.358297155071411e-05,-1.1690992800869759e-05,6.318503319973864e-05,0.00014381767759789795,0.00019251243803779036,0.00017926123825758952,0.0001000818332442074,-1.6126375534177568e-05,-0.00011671308546651544,-0.00014909952823524274,-9.034462379991167e-05,3.719860657268353e-05,0.000170566958288551,0.00023529932246290294,0.00018466772072276056,2.9289445280800564e-05,-0.00016078909996314534,-0.00028663947125544454,-0.00027100487575933954,-0.00010429046250507815,0.00014168801171211316,0.0003422025862131671,0.0003818929142969262,0.00021907577064303474,-8.20382056371615e-05,-0.0003739779595254185,-0.0004966408861465735,-0.00036370505587745086,-1.8349981315456652e-05,0.0003755046269451075,0.0006091699582400865,0.0005381801198530545,0.00016824469265868942,-0.00033173749690819534,-0.0007042827114502241,-0.0007343147949394064,-0.0003705287895678264,0.0002298187938226951,0.0007654814578375737,0.0009402684616667222,0.0006245660962946229,-5.827137266615671e-05,-0.0007742445047035162,-0.0011398606227698196,-0.000925052977893023,-0.000192273355532753,0.0007104885738672611,0.0013117631764071364,0.0012604928520933167,0.0005264757962187468,-0.0005547766071170229,-0.00143121429911602,-0.0016133256205593033,-0.0009437708029966104,0.00028941647754240544,0.0014702889673182864,0.0019595087344616508,0.0014367577825835794,9.983855847577527e-05,-0.0013993654659085353,-0.0022685703222038293,-0.001990182205938592,-0.0006217411439447768,0.0011888043302356846,0.0025046053219223365,0.002580458661425593,0.001278464997496623,-0.0008103933130272807,-0.00262669503357579,-0.0031751380329187425,-0.00206371235014662,0.0002392870616855232,0.0025904634230410127,0.0037328902106388536,0.0029616867558883942,0.0005441309657401852,-0.0023494031777414204,-0.004204153775682432,-0.003946589834412276,-0.0015534843966052419,0.0018556489853696649,0.004531058865984813,0.00498208785424941,0.0027954541141162787,-0.0010604266066783173,-0.004647564872824069,-0.006021033196259746,-0.004270033615525379,-8.659196186510841e-05,0.0044784328013305124,0.007005460773925839,0.005972042854595251,0.001640644673802196,-0.003935936679510697,-0.00786546884930151,-0.00789450226503198,-0.003669051692058861,0.0029121108511674103,0.008516812127230794,0.010035760216213548,0.006267648757190845,-0.0012607753153357016,-0.008853463193199294,-0.012413388821774368,-0.009595983358553363,-0.0012437946545409014,0.008728187587486178,0.015092634373100638,0.013958188753522921,0.005006523800487536,-0.007902061594602107,-0.01825774081693717,-0.0200187999363573,-0.010892875756028547,0.0058913344027753094,0.022426795160134683,0.029510694968041637,0.021224826269884898,-0.001372348434706864,-0.02934264322933621,-0.0485474232353165,-0.04512094504838804,-0.011594716872094268,0.04895628136353434,0.12271541345547768,0.18927057841120407,0.22867097726040536,0.22867097726040536,0.18927057841120407,0.12271541345547768,0.04895628136353434,-0.011594716872094268,-0.04512094504838804,-0.0485474232353165,-0.02934264322933621,-0.001372348434706864,0.021224826269884898,0.029510694968041637,0.022426795160134683,0.0058913344027753094,-0.010892875756028547,-0.0200187999363573,-0.01825774081693717,-0.007902061594602107,0.005006523800487536,0.013958188753522921,0.015092634373100638,0.008728187587486178,-0.0012437946545409014,-0.009595983358553363,-0.012413388821774368,-0.008853463193199294,-0.0012607753153357016,0.006267648757190845,0.010035760216213548,0.008516812127230794,0.0029121108511674103,-0.003669051692058861,-0.00789450226503198,-0.00786546884930151,-0.003935936679510697,0.001640644673802196,0.005972042854595251,0.007005460773925839,0.0044784328013305124,-8.659196186510841e-05,-0.004270033615525379,-0.006021033196259746,-0.004647564872824069,-0.0010604266066783173,0.0027954541141162787,0.00498208785424941,0.004531058865984813,0.0018556489853696649,-0.0015534843966052419,-0.003946589834412276,-0.004204153775682432,-0.0023494031777414204,0.0005441309657401852,0.0029616867558883942,0.0037328902106388536,0.0025904634230410127,0.0002392870616855232,-0.00206371235014662,-0.0031751380329187425,-0.00262669503357579,-0.0008103933130272807,0.001278464997496623,0.002580458661425593,0.0025046053219223365,0.0011888043302356846,-0.0006217411439447768,-0.001990182205938592,-0.0022685703222038293,-0.0013993654659085353,9.983855847577527e-05,0.0014367577825835794,0.0019595087344616508,0.0014702889673182864,0.00028941647754240544,-0.0009437708029966104,-0.0016133256205593033,-0.00143121429911602,-0.0005547766071170229,0.0005264757962187468,0.0012604928520933167,0.0013117631764071364,0.0007104885738672611,-0.000192273355532753,-0.000925052977893023,-0.0011398606227698196,-0.0007742445047035162,-5.827137266615671e-05,0.0006245660962946229,0.0009402684616667222,0.0007654814578375737,0.0002298187938226951,-0.0003705287895678264,-0.0007343147949394064,-0.0007042827114502241,-0.00033173749690819534,0.00016824469265868942,0.0005381801198530545,0.0006091699582400865,0.0003755046269451075,-1.8349981315456652e-05,-0.00036370505587745086,-0.0004966408861465735,-0.0003739779595254185,-8.20382056371615e-05,0.00021907577064303474,0.0003818929142969262,0.0003422025862131671,0.00014168801171211316,-0.00010429046250507815,-0.00027100487575933954,-0.00028663947125544454,-0.00016078909996314534,2.9289445280800564e-05,0.00018466772072276056,0.00023529932246290294,0.000170566958288551,3.719860657268353e-05,-9.034462379991167e-05,-0.00014909952823524274,-0.00011671308546651544,-1.6126375534177568e-05,0.0001000818332442074,0.00017926123825758952,0.00019251243803779036,0.00014381767759789795,6.318503319973864e-05,-1.1690992800869759e-05,-5.358297155071411e-05,-0.00011975709287684854};
    }

    std::vector<float> fir_coeffs_quarter()
    {
        return std::vector<float>{
            1.24919278e-04,
            1.87340062e-04,
            2.54336466e-04,
            3.19419542e-04,
            3.74655087e-04,
            4.11165271e-04,
            4.19813565e-04,
            3.92038171e-04,
            3.20780621e-04,
            2.01440077e-04,
            3.27717133e-05,
            -1.82358899e-04,
            -4.36453212e-04,
            -7.17168929e-04,
            -1.00748549e-03,
            -1.28628744e-03,
            -1.52937838e-03,
            -1.71090455e-03,
            -1.80513157e-03,
            -1.78848233e-03,
            -1.64171198e-03,
            -1.35207001e-03,
            -9.15281892e-04,
            -3.37176770e-04,
            3.65206597e-04,
            1.16318370e-03,
            2.01677387e-03,
            2.87590733e-03,
            3.68250762e-03,
            4.37340718e-03,
            4.88399089e-03,
            5.15240109e-03,
            5.12408244e-03,
            4.75640038e-03,
            4.02303662e-03,
            2.91785302e-03,
            1.45792206e-03,
            -3.14549107e-04,
            -2.33162605e-03,
            -4.50054372e-03,
            -6.70616835e-03,
            -8.81500806e-03,
            -1.06806578e-02,
            -1.21504677e-02,
            -1.30731356e-02,
            -1.33068463e-02,
            -1.27275284e-02,
            -1.12367619e-02,
            -8.76886842e-03,
            -5.29673644e-03,
            -8.35986530e-04,
            4.55284086e-03,
            1.07642930e-02,
            1.76503082e-02,
            2.50247886e-02,
            3.26702858e-02,
            4.03465187e-02,
            4.78003304e-02,
            5.47766012e-02,
            6.10295684e-02,
            6.63339694e-02,
            7.04954233e-02,
            7.33595010e-02,
            7.48189943e-02,
            7.48189943e-02,
            7.33595010e-02,
            7.04954233e-02,
            6.63339694e-02,
            6.10295684e-02,
            5.47766012e-02,
            4.78003304e-02,
            4.03465187e-02,
            3.26702858e-02,
            2.50247886e-02,
            1.76503082e-02,
            1.07642930e-02,
            4.55284086e-03,
            -8.35986530e-04,
            -5.29673644e-03,
            -8.76886842e-03,
            -1.12367619e-02,
            -1.27275284e-02,
            -1.33068463e-02,
            -1.30731356e-02,
            -1.21504677e-02,
            -1.06806578e-02,
            -8.81500806e-03,
            -6.70616835e-03,
            -4.50054372e-03,
            -2.33162605e-03,
            -3.14549107e-04,
            1.45792206e-03,
            2.91785302e-03,
            4.02303662e-03,
            4.75640038e-03,
            5.12408244e-03,
            5.15240109e-03,
            4.88399089e-03,
            4.37340718e-03,
            3.68250762e-03,
            2.87590733e-03,
            2.01677387e-03,
            1.16318370e-03,
            3.65206597e-04,
            -3.37176770e-04,
            -9.15281892e-04,
            -1.35207001e-03,
            -1.64171198e-03,
            -1.78848233e-03,
            -1.80513157e-03,
            -1.71090455e-03,
            -1.52937838e-03,
            -1.28628744e-03,
            -1.00748549e-03,
            -7.17168929e-04,
            -4.36453212e-04,
            -1.82358899e-04,
            3.27717133e-05,
            2.01440077e-04,
            3.20780621e-04,
            3.92038171e-04,
            4.19813565e-04,
            4.11165271e-04,
            3.74655087e-04,
            3.19419542e-04,
            2.54336466e-04,
            1.87340062e-04,
            1.24919278e-04,
        };
    }
}
